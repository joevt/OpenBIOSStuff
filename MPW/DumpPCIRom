Set detokoptions ""if "{{1}}" == "-v"	Set detokoptions "-v"	ShiftEndIf {#} ­ 1	Echo "### Error in parameter list"	Echo "### Usage - DumpPCIRom [-v] RomDataForkFile > output ³ messages"	Echo "#"	Echo "#         -v   output fcode numbers for all tokens"	Exit 1End# Set Echo 0# Set Echo 1# Set 1 'Work:Programming:CW Projects:DumpNameRegistry:ROM Radeon 7000:ROMs:Radeon 7000 v208'# Set 1 "{theDir}Radeon7000v208.fc"Set theROM "{{1}}"Set RomStart 0Set RomFileSize `Files -x b -n "{theROM}" | StreamEdit -e "/Å ([0-9]+)¨1b°/ Change ¨1"`Set detokErrors "{TempFolder}detokErrors"Echo -n > "{detokErrors}"Loop	#========================================	# Dump PCI header		Set dump1 `Evaluate {RomStart} + 0`	Set dump2 `Evaluate {RomStart} + 27`	Set vpd "`DumpFile -o -w 28 -g 4 -r {dump1},{dump2} "{theROM}" | StreamEdit -e "1,6 Delete"`"	If "{vpd}" =~ /(????)¨1(??)¨2(??)¨3 (?Ç44È)¨4 (??)¨5(??)¨6(????)¨7 ????(?Ç20È)¨8????/	End	Set PciMagicNumber {¨1}	Set offset2 0	Set codeTypeString "Open Firmware"	Set IndicatorString "last image"		If {PciMagicNumber} == 55AA		Set ProcessorArchitecture {¨3}{¨2}		Set ProcessorArchitectureUniqueData "{¨4} {¨8}"		Set PointerPCIDataStructure {¨6}{¨5}		Set PadBytes {¨7}			Set dump1 `Evaluate {RomStart} + ${PointerPCIDataStructure}`		Set dump2 `Evaluate {RomStart} + ${PointerPCIDataStructure} + 23`		Set pds "``(DumpFile -o -w 24 -g 4 -r {dump1},{dump2} "{theROM}" | StreamEdit -e "1,6 Delete")``"		If "{{pds}}" =~ /?Ç8È (??)¨1(??)¨2(??)¨3(??)¨4 (??)¨5(??)¨6(??)¨7(??)¨8 (??)¨9(?Ç29È)¨0?Ç20È/		Else			Echo '# bad pds' ³ Dev:StdErr		End			Set VendorID {¨2}{¨1}		Set DeviceID {¨4}{¨3}		Set PointerVitalProductData {¨6}{¨5}		Set PCIDataStructureLength {¨8}{¨7}		Set PCIDataStructureRevision {¨9}			If "{¨0}" =~ /(??)¨0(??)¨1(??)¨2 (??)¨3(??)¨4(??)¨5(??)¨6 (??)¨7(??)¨8(???? ????)¨9/		Else			Echo "# bad ¨0"		End			Set ClassCode {¨2}{¨1}{¨0}		Set ImageLength {¨4}{¨3}		Evaluate ImageBytes = ${ImageLength} * 512		Set RevisionLevel {¨6}{¨5}		Set CodeType {¨7}		Set Indicator {¨8}			If "{¨9}" =~ /(????)¨1 (????)¨2/		End		Set Reserved {¨1}		Set SignatureString "{¨2}"			Evaluate offset2 = {RomStart} + ${PointerPCIDataStructure} + ${PCIDataStructureLength}			If "{CodeType}" == "00"			Set codeTypeString "BIOS"		Else If "{CodeType}" == "01"			Set codeTypeString "Open Firmware"		Else If "{CodeType}" == "02"			Set codeTypeString "Hewlett-Packard PA RISC"		Else If "{CodeType}" == "03"			Set codeTypeString "EFI"		Else			Set codeTypeString "??"		End		If "{Indicator}" == "80"			Set IndicatorString "last image"		Else If "{Indicator}" == "00"			Set IndicatorString "another image"		Else			Set IndicatorString "??"		End			If {PointerPCIDataStructure} ­ 001C			Set dump1 `Evaluate {RomStart} + 28`			Set dump2 `Evaluate {RomStart} + ${PointerPCIDataStructure} - 1`			Set width `Evaluate (${PointerPCIDataStructure} - 28 + 3) & -4`			Set varBytes  "\                            Variable length pad bytes: ¶n"`DumpFile -o -w 32 -g 4 -r {dump1},{dump2} "{theROM}" | StreamEdit -e "1,6 Delete; 7,$ Change '¶¶\        ' . " | QuoteFile`		Else			Set varBytes ""		End			If {PCIDataStructureLength} ­ 0018			Set dump1 `Evaluate {RomStart} + ${PointerPCIDataStructure} + 24`			Set dump2 `Evaluate {offset2} - 1`			Set width `Evaluate (${PCIDataStructureLength} - 24 + 3) & -4`			Set varBytes2 "\                            Variable length pad bytes: ¶n"`DumpFile -o -w 32 -g 4 -r {dump1},{dump2} "{theROM}" | StreamEdit -e "1,6 Delete; 7,$ Change '¶¶\          ' . " | QuoteFile`		Else			Set varBytes2 ""		End			Begin			Echo -n ¶"\   PCI expansion PROM header¶n"¶"\                              PCI magic number (55AA): {PciMagicNumber}¶n"¶"\                   Processor architecture unique data: {ProcessorArchitecture}¶n"¶"\      Reserved for processor architecture-unique data: {ProcessorArchitectureUniqueData}¶n"¶"\               Pointer to start of PCI Data Structure: {PointerPCIDataStructure}¶n"¶"\                                            Pad bytes: {PadBytes}¶n"¶"{{varBytes}}"¶"\   ¶n"¶"\   PCI Data Structure (4 byte aligned)¶n"¶"\                              Signature string (PCIR): {SignatureString}¶n"¶"\                         Vendor ID = config reg 00/01: {VendorID}¶n"¶"\                         Device ID = config reg 02/03: {DeviceID}¶n"¶"\                        Pointer to Vital Product Data: {PointerVitalProductData}¶n"¶"\                            PCI Data Structure length: {PCIDataStructureLength}¶n"¶"\                          PCI Data Structure revision: {PCIDataStructureRevision}¶n"¶"\                     Class Code = config reg 09/0a/0b: {ClassCode} (Class code / Subclass code / Programming interface code)¶n"¶"\                            Image Length in 512 bytes: {ImageLength} (* 0x200 = `Evaluate -H {imageBytes}`)¶n"¶"\                          Revision Level of Code/Data: {RevisionLevel}¶n"¶"\                                            Code Type: {CodeType} = {codeTypeString}¶n"¶"\                                            Indicator: {Indicator} = {IndicatorString}¶n"¶"\                                             reserved: {Reserved}¶n"¶"{{varBytes2}}"¶"¶n"¶"hex¶n"¶"¶n"				If 1				If "{RevisionLevel}" ­ "0001"					Echo "tokenizer[ {RevisionLevel} ]tokenizer set-rev-level"				End					If "{PointerVitalProductData}" ­ "0000"					Echo "tokenizer[ {PointerVitalProductData} ]tokenizer set-vpd-offset"				End					If "{ProcessorArchitecture}" ­ "0034"					Echo "tokenizer[ {ProcessorArchitecture} ]tokenizer pci-architecture"				End					If "{PointerPCIDataStructure}" ­ "001C"					Echo "tokenizer[ {PointerPCIDataStructure} ]tokenizer pci-data-structure-start"				End					If "{PCIDataStructureLength}" ­ "0018"					Echo "tokenizer[ {PCIDataStructureLength} ]tokenizer pci-data-structure-length"				End					Echo "tokenizer[ {VendorID} {DeviceID} {ClassCode} ]tokenizer pci-header"					Echo "tokenizer[ `(Evaluate -H {imageBytes}) | StreamEdit -e "/0x(Å)¨1/ Change ¨1"` ]tokenizer rom-size"					Echo			End		End > "{TempFolder}PCIHeader"	End			#Exit 0		#========================================	# Dump FCode		If {offset2} ­ 0		Set sourceFCode "{TempFolder}FCode"		Open -h "{theROM}"		Find ¥!{offset2}:¥!`Evaluate {RomStart} + {ImageBytes}` "{theROM}"		Catenate "{theROM}".¤ > "{sourceFCode}"		Close "{theROM}"		Evaluate RomStart += {ImageBytes}	Else		Set sourceFCode "{TempFolder}FCode"		Open -h "{theROM}"		Find ¥!{RomStart}:°` "{theROM}"		Catenate "{theROM}".¤ > "{sourceFCode}"		Close "{theROM}"		Evaluate RomStart = $7FFFFFFF	End		Set FCode0 "{TempFolder}FCode0.of"		Close -y "{FCode0}" ³ Dev:Null || ()		If "{codeTypeString}" == "Open Firmware"		detok -t {detokoptions} "{sourceFCode}" > "{FCode0}" ³³ "{detokErrors}"		ConvertFCodeTokensToForth "{FCode0}" "{Offset2}"	Else		Catenate "{TempFolder}PCIHeader"		DumpFile -o -w 32 -g 4 "{sourceFCode}" | StreamEdit -e "1,6 Delete"	End	Break If {RomStart} >= {RomFileSize}	Echo "¶n¶n"End	# Loop# Remove lines that are supposed to occur in the errors output but are very numerous. This makes the other lines (which are likely supposed to be there but are not very numerous) stand out.StreamEdit "{detokErrors}" -e "(/¥'Doing Pass 1'/,/¥'Doing Pass 2'/) && /'# Defined program defined token'/ Delete; (/¥'Doing Pass 2'/,$) && /'# Redefined program defined token'/ Delete" > Dev:StdErrExit 0