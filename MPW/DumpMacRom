# Open -f `Directory`If 0	# To dump the Open Firmware dictionary:	#	# Run Terminal.app and set the terminal width to 130 and make sure the unlimited buffer option is selected in the window preferences.	# On the other computer, enter Open Firmware and type: " enet:telnet,192.168.1.150" io	# Then in the terminal type the following:		telnet	open 192.168.1.150		: dumpbytes	cr bounds ?do i 3f and 0= if cr then i c@ 2 u.r loop cr ;			# The first word in the dictionary is the last one listed when using the words command.	# Use ' to get the address of the word.		0 > ' <init-world> . ff845730  ok					# Use dump to find memory before the first word that may contain stuff that you want to include in the disassembly		# Then dump everything from that address to the end of the dictionary (which is given by the word "here")	0 > ff844b00 here ff844b00 - dumpbytes		# If your Mac has a serial port then that can be used instead of telnet. Use the patch described in "Serial Port OF Mods"	# to set the serial port's speed to 230400 bps before starting.EndSet dumpRomDictionary 0Set romStartOffset 0Loop	If "{1}" == "-d"		Set dumpRomDictionary 1		Shift	Else		If "{{1}}" =~ /"-s"/			Shift			Set romStartOffset "{1}"			Shift		Else			Break		End	EndEndIf {#} < 1	Echo "### Error in parameter list"	Echo "### Usage - DumpMacRom [-d] [-s startoffset] romdumpfile"	Echo "#"	Echo "# Dumps Open Firmware part of Old World ROM ($30000 bytes at $FFF30000) including assembly part"	Echo "# Also works with memory dumps of the Open Firmware dictionary.	Echo "# 		-d			dump rom dictionary	Echo "# 		-s			address of rom dump start	Exit 1EndSet curDir `Directory`Set romFile `Files -f "{{1}}"`If "{romFile}" =~ /(Å:)¨1[Â:]+/	Directory "{{¨1}}"Else	Exit 1EndBegin	#Alias detok '"Updates:Unstuff Folder:Open Firmware / Forth:OpenBIOS:detok-0.5.2r3:Output:detok"'#Exit 1# Init variables	Set dstFile "All.txt"	Set dstFile2 'Part1.txt'	Set dstFile3 'Part2.txt'	Set dstFile4 'Part2.of'	Close -n "{dstFile}" ³ Dev:Null || ()	Close -n "{dstFile2}" ³ Dev:Null || ()	Close -n "{dstFile3}" ³ Dev:Null || ()	Close -n "{dstFile4}" ³ Dev:Null || ()	Close -n "errors" ³ Dev:Null || ()	Close -n "mac_rom_b_usage" ³ Dev:Null || ()	Close -n "errors3" ³ Dev:Null || ()	Close -n "ferrors" ³ Dev:Null || ()# detok	Catenate "{romFile}" | Translate "Â-A-Za-z0-9_,. " "¶n" > "{TempFolder}romtemp"	( Search -sf /'Open Firmware, 1.0.5'/ "{TempFolder}romtemp" > Dev:Null && Set macrom 1 ) || ¶	( Search -sf /'Open Firmware, 2.0f1'/ "{TempFolder}romtemp" > Dev:Null && Set macrom 2 ) || ¶	( Search -sf /'Open Firmware, 2.4'/   "{TempFolder}romtemp" > Dev:Null && Set macrom 2 ) || ¶	( Search -sf /'OpenFirmware 3'/       "{TempFolder}romtemp" > Dev:Null && Set macrom 8 ) || ¶	Begin		echo "unknown Open Firmware version"		Set macrom 4	End		detok -t -v -a -n -o -i -m {macrom} -s "{romStartOffset}" "{romFile}" ³ "{TempFolder}errors" > "{dstFile}"# Add file command to errors	StreamEdit "{TempFolder}errors" -e "1,$ Change ¶"File '{dstFile}'; ¶" . " > "errors"# Set window format	Open -h "{dstFile}"	Format -f Monaco -s 9 -t 4 -l Forth "{dstFile}"	If !{dumpRomDictionary}# Remove all the zeros at the end of the rom		Find ° "{dstFile}"		Find \¥[0-9A-F :]+Å\ "{dstFile}"		If "`Catenate "{dstFile}".¤`" =~ /[0-9A-F :]+'\ detokenizing finished'Å/			Find Æ¤ "{dstFile}"			Find ¤:\¥[0-9A-F :]+'\ detokenizing finished'\ "{dstFile}"			StreamEdit "{dstFile}".¤ -e "/¥[0-9A-F :]+': '(0000 )+[ ]+'¶"'/ Delete" | StreamEdit -e "!$ Delete" > "{TempFolder}temp"			Find ° "{dstFile}"			Find \"``Catenate "{TempFolder}temp"``"\ "{dstFile}"			Clear !1:Æ/¥Å': \'/ "{dstFile}" || ()		End	End# Split the dump at the first start fcode	Catenate "{dstFile}" > "{dstFile2}"	Close -y "{dstFile}"	Open -h "{dstFile2}"	Format -f Monaco -s 9 -t 4 -l Forth "{dstFile2}"	Echo -n > "{dstFile3}"	Find ¥ "{dstFile2}"	Loop		Find (/'\ detokenizing start'/:\¥\):/'\ detokenizing finished'Å¶n/ "{dstFile2}" || Break		Catenate "{dstFile2}".¤ >> "{dstFile3}"		Clear (Æ¤:/Å¶n/)Æ:Æ/¥Å'\ detokenizing finished'/ "{dstFile2}"	End	Close -y "{dstFile2}"		Equal -d "{dstFile}" "{dstFile2}" > Dev:Null && Delete "{dstFile2}"# Find bad errors by removing the benign ones	Close -n remainingErrors ³ Dev:Null || ()	Close -n remainingErrors2 ³ Dev:Null || ()	Close -n errorCounts ³ Dev:Null || ()	Close -n errors2 ³ Dev:Null || ()	Catenate errors > remainingErrors	Echo -n > remainingErrors2	Echo -n > errorCounts	Echo -n > errors2		DumpMacRomDoErrors '# Defined extended range token'		DumpMacRomDoErrors '# Defined named visible token'		DumpMacRomDoErrors '# Defined named invisible token'		DumpMacRomDoErrors '# Renamed program defined token'		DumpMacRomDoErrors '# Renamed extended range token'		DumpMacRomDoErrors '# Undefined'		DumpMacRomDoErrors '# Redefined program defined token'		DumpMacRomDoErrors '# Defined program defined token'		DumpMacRomDoErrors '# Defined headerless token'		DumpMacRomDoErrors '# Renamed negative range token'		DumpMacRomDoErrors '# Defined instance token'		DumpMacRomDoErrors '# Defined predefined reserved token'		DumpMacRomDoErrors '# Defined headerless invisible token'		DumpMacRomDoErrors '# Defined immediate token'		DumpMacRomDoErrors '# Defined vectored token'		DumpMacRomDoErrors '# Defined negative range token'		DumpMacRomDoErrors '# Defined reserved token'		DumpMacRomDoErrors '# Defined alias token'		DumpMacRomDoErrors '# Defined predefined new token'		DumpMacRomDoErrors '# Renamed predefined reserved token'		DumpMacRomDoErrors '# Redefined extended range token'		DumpMacRomDoErrors '# Defined predefined historical token'		DumpMacRomDoErrors '# Renamed predefined historical token'		DumpMacRomDoErrors '; Previous token offset is 0'		DumpMacRomDoErrors '; Token offset points to'#		DumpMacRomDoErrors '# Redefined predefined token'#		DumpMacRomDoErrors '# Redefined new token'#		DumpMacRomDoErrors '# Renamed predefined token'#		DumpMacRomDoErrors '# Redefined historical token'		DumpMacRomDoErrors '# Assembly instruction has invalid field'		DumpMacRomDoErrors '# Possibly invalid special purpose register'		DumpMacRomDoErrors 'because it should have a good name'		DumpMacRomDoErrors '# start'		DumpMacRomDoErrors '# end'		DumpMacRomDoErrors '# Unknown start'		DumpMacRomDoErrors '# Indentation error'	If 0		# tokens should not have bad names		DumpMacRomDoErrors '# Bad token name'		DumpMacRomDoErrors '# Bad b(code) token name'		DumpMacRomDoErrors '# Bad b(:) token name'		DumpMacRomDoErrors '# Bad b(value) token name'		DumpMacRomDoErrors '# Bad b(variable) token name'		DumpMacRomDoErrors '# Bad b(constant) token name'		DumpMacRomDoErrors '# Bad b(create) token name'		DumpMacRomDoErrors '# Bad b(defer) token name'		DumpMacRomDoErrors '# Bad b(buffer:) token name'		DumpMacRomDoErrors '# Bad b(field) token name'	End	If 0		# tokens should not get renamed (unless they are some kind of alias)		DumpMacRomDoErrors '# Renamed new token'		DumpMacRomDoErrors '# Renamed reserved token'		DumpMacRomDoErrors '# Renamed vendor unique token'		DumpMacRomDoErrors '# Renamed historical token'	End		DumpMacRomDoErrors '# Ignored attempt to rename'	If 0		# these should not get redefined		DumpMacRomDoErrors '# Redefined reserved token'		DumpMacRomDoErrors '# Redefined vendor unique token'	End	If 0		# these should not be defined		DumpMacRomDoErrors '# Defined historical token'		DumpMacRomDoErrors '# Defined new token'		DumpMacRomDoErrors '# Defined predefined token'	End		DumpMacRomDoErrors '# Defined vendor unique token'	If 0		# these tokens should not get used		DumpMacRomDoErrors '# Historical or non-implemented FCode'	End		DumpMacRomDoErrors '# New FCode'	If 1		# status messages		DumpMacRomDoErrors '# Min negative FCode number is'		DumpMacRomDoErrors '# Max FCode number is'		DumpMacRomDoErrors 'Doing Pass'	End	Set numErrors `Count -l remainingErrors`	If {numErrors} == 0		Delete remainingErrors	End		# Sort -r errorCounts -o errorCounts	# StreamEdit errorCounts -e "/¥[ ]+[0-9]+  (Å)¨1/ Change ¶"DumpMacRomDoErrors '¶" ¨1 ¶"'¶""	# comparefiles errors errors2	Search /ferror/ "{dstFile}" | StreamEdit -e "/(Å:)¨1[ ¶t]*(ferrorÅ)¨2/ Change ¨1 ' ' ¨2; /'b('/ || / bl / || / dc.l / Delete;  " > ferrors	If "``Files -n -x b ferrors``" =~ /Å 0b/		Delete ferrors	Else		Echo -n "Open "		Files -f ferrors		StreamEdit ferrors -e "/'[0x'([0-9a-f]Ç3,4È)¨1']'/ Change ' ' ¨1; /¥[ ]*(?Ç4È)¨1°/ Change ¨1" | Sort	End	(Search /mac_rom_/ "{dstFile3}" || ()) | StreamEdit -e "/(mac_rom_[Â ]+)¨1/ Change ¨1" | Sort -unique > mac_rom_b_usage	If "``Files -n -x b mac_rom_b_usage``" =~ /Å 0b/		Delete mac_rom_b_usage	End	StreamEdit "errors" -e "!(/0x[0-9A-F]Ç3,4È/) || / New FCode/ || / FCode number is / Delete; Next¶n/¥(Å'; Line ')¨1([0-9]Ç1,5È)¨3(' #'Å)¨2/ Set p1 ¨1; Set p2 ¨2; Change '     ' ¨3; Replace /[ ]+(?Ç6È)¨1/ ¨1; Change p1 . p2; ¶n¶n/0x([0-9A-F]Ç4È)¨1/ Change 'Set a 0x'¨1'; ' .; Next¶n/0x([0-9A-F]Ç3È)¨1[Â0-9A-F]/ Change 'Set a  0x'¨1'; ' .; Next¶n/0x([0-9A-F]Ç3È)¨1°/ Change 'Set a  0x'¨1'; ' ." | Sort > fcode_defines	StreamEdit "{dstFile3}" -e "/¥[ ]*[0-9]+: [0-9A-F]+: (Å)¨1/ Change ¨1" > "{tempFolder}Part2.txt"	If "``Files -n -x b "{tempFolder}Part2.txt"``" =~ /Å 0b/		Delete "{tempFolder}Part2.txt"	Else		ConvertFCodeTokensToForth "{TempFolder}Part2.txt" > "{dstFile4}" ³ "errors3" || ()		If "``Files -n -x b errors3``" =~ /Å 0b/			Delete errors3		End	End	If "``Files -n -x b "{dstFile3}"``" =~ /Å 0b/		Delete "{dstFile3}"	EndEnd || (Directory "{{curDir}}"; Exit 1)Directory "{{curDir}}"Exit 0Set CaseSensitive 1Set dstFile2 'Work:DumpNameRegistry:ROM 8600:Part1.txt'Set dstFile2 'Work:DumpNameRegistry:ROM 8600:compiledfcode:Mine:Part1.txt'Open "{dstFile2}"For thereg In	¶		#Ã		r16_curDictionaryPtr ¶				r17				r18		#Ã		r19_topReturnStackItem ¶		#Ã		r20_topStackItem ¶# temp			r21															r22_topControlFlowStackItem ¶				r23_2ndControlFlowStackItem ¶				r24_3rdTopControlFlowStackItemPtr ¶		#Ã		r25_startvec ¶				r26				r27				r28				r29		#Ã		r30_2ndReturnStackItemPtr ¶		#Ã		r31_2ndStackItemPtr ¶For thereg In	¶				r16_curDictionaryPtr ¶				r19_topReturnStackItem ¶				r20_topStackItem ¶				r25_startvec ¶				r30_2ndReturnStackItemPtr ¶				r31_2ndStackItemPtr ¶	Echo {theReg}	If {theReg} =~ /(r[0-9]+)¨3_(Å)¨4/		Loop			Find ¥ "{dstFile2}"			Replace -c ° /([Âa-z0-9_])¨1{¨3}([Âa-z0-9_])¨2/ ¨1"{theReg}"¨2 "{dstFile2}" || Break		End	End # IfEnd # ForUnset CaseSensitiver16_curDictionaryPtrr19_topReturnStackItemr20_topStackItemr25_startvecr30_2ndReturnStackItemPtrr31_2ndStackItemPtrset echo 0 set echo 0i		r22j		0(r24)leave	r22=0(r24)  r23=4(r24)  pc=8(r24)  r24+=12unloop	r22=0(r24)  r23=4(r24)             r24+=12